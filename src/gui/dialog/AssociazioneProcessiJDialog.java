/*
 * Azienda: Stylosoft
 * Nome file: AssociazioneProcessiJDialog.java
 * Package: gui.dialog
 * Autore: Giordano Cariani
 * Data: 01/03/2008
 * Versione: 1.0
 * Licenza: open-source
 * Registro delle modifiche: *  
 *  - v.1.1 (02/03/2008): inserita label "passo 4 di 4"
 *                        inserita inizializzazione grafico processi
 *  - v.1.0 (01/03/2008): Creazione JDialog e impostazione grafica
 */

package gui.dialog;

import gui.SiGeMv2View;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.LinkedList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import logic.gestioneMemoria.FrameMemoria;
import logic.gestioneMemoria.Pagina;
import logic.parametri.ConfigurazioneIniziale;
import logic.parametri.Id;
import logic.parametri.Processo;
import logic.parametri.ProcessoConPriorita;

/**
 *
 * @author  Jordy
 */
public class AssociazioneProcessiJDialog extends javax.swing.JDialog {
    private ConfigurazioneAmbienteJDialog configurazioneAmbiente;
    private PoliticheJDialog politica;
    private ProcessiJDialog processi;
    private SiGeMv2View view;
    private ConfigurazioneIniziale confIniziale;
    private LinkedList<Processo> listaProcessi;
    private Vector<JList> listaList = new Vector<JList>();
    private Vector<DefaultListModel> listModels = new Vector<DefaultListModel>();
            
    private Vector<FrameMemoria> listaFrame = new Vector<FrameMemoria>();
    private ArrayListTransferHandler arrayListHandler;
    
    /**
     * Modello per la lista delle pagine
     */
    DefaultListModel listaFrameModel;
    
    private Vector<DefaultListModel> modelliListaFrame = new Vector<DefaultListModel>();
    
    /** 
     * Contatore dei frameMemoria. Serve per generare un numero sempre nuovo
     per l'indirizzo del nuovo frame */
    private int contatoreFrame=0;
    
    
     /** Creates new form AssociazioneProcessiJDialog */
    public AssociazioneProcessiJDialog(java.awt.Frame parent, boolean modal, ConfigurazioneAmbienteJDialog configurazione, PoliticheJDialog pol, ProcessiJDialog proc, SiGeMv2View view) {
        super(parent, modal);
        configurazioneAmbiente = configurazione;
        politica = pol;
        processi = proc;
        this.view = view;
        
        int numProcessi = configurazioneAmbiente.getNumProcessi();
        
        for(int i=0; i<numProcessi; i++){           
            modelliListaFrame.add(new DefaultListModel());
        } 
        
        initComponents();
        
        if (politica.getGestioneMemoria() == 1){
            jLabelAssociazioneProcessi.setText("ASSOCIAZIONE PROCESSI - PAGINE");
            jButtonNuovoFrame.setText("Nuova Pagina");
        }
        else {
            jLabelAssociazioneProcessi.setText("ASSOCIAZIONE PROCESSI - SEGMENTI");
            jButtonNuovoFrame.setText("Nuovo segmento");
        }
        
        arrayListHandler = new ArrayListTransferHandler();
        
        for(int i=0; i<numProcessi; i++){
            jTabbedPaneProcessi.addTab("Processo "+i, creaPannelloProcesso(i));
            modelliListaFrame.add(new DefaultListModel());
        }          
        
        listaFrameModel = modelliListaFrame.get(0);
        jListFrame.setModel(listaFrameModel);
        jListFrame.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jListFrame.setTransferHandler(arrayListHandler);
        jListFrame.setDragEnabled(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelPasso = new javax.swing.JLabel();
        jButtonIndietro = new javax.swing.JButton();
        jButtonOk = new javax.swing.JButton();
        jButtonAnnulla = new javax.swing.JButton();
        jLabelAssociazioneProcessi = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPaneProcessi = new javax.swing.JTabbedPane();
        jPanelFrame = new javax.swing.JPanel();
        jButtonNuovoFrame = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFrame = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabelPasso.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabelPasso.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPasso.setText("Passo 4 di 4");

        jButtonIndietro.setText("Indietro");
        jButtonIndietro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIndietroActionPerformed(evt);
            }
        });

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonAnnulla.setText("Annulla");
        jButtonAnnulla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnullaActionPerformed(evt);
            }
        });

        jLabelAssociazioneProcessi.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabelAssociazioneProcessi.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAssociazioneProcessi.setText("ASSOCIAZIONE PROCESSI");

        jTabbedPaneProcessi.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPaneProcessi.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneProcessiStateChanged(evt);
            }
        });

        jButtonNuovoFrame.setText("Nuova");
        jButtonNuovoFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuovoFrameActionPerformed(evt);
            }
        });

        jListFrame.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jListFrame.setName("jListFrame"); // NOI18N
        jScrollPane1.setViewportView(jListFrame);

        javax.swing.GroupLayout jPanelFrameLayout = new javax.swing.GroupLayout(jPanelFrame);
        jPanelFrame.setLayout(jPanelFrameLayout);
        jPanelFrameLayout.setHorizontalGroup(
            jPanelFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonNuovoFrame, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelFrameLayout.setVerticalGroup(
            jPanelFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNuovoFrame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPaneProcessi, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneProcessi, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
            .addComponent(jPanelFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(233, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelPasso, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonIndietro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAnnulla)
                        .addGap(164, 164, 164))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabelAssociazioneProcessi, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelPasso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAssociazioneProcessi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk)
                    .addComponent(jButtonAnnulla)
                    .addComponent(jButtonIndietro))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonIndietroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIndietroActionPerformed
        this.setVisible(false);
        processi.setVisible(true);
    }//GEN-LAST:event_jButtonIndietroActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        /* Innanzitutto azzero il contatore del generatore di Id di processo*/
        Id.resetCounter();
        
        /* Creo i processi */
        listaProcessi = new LinkedList<Processo>();
        if (politica.getPoliticaSchedulazione() == 6
                || politica.getPoliticaSchedulazione() == 7
                || politica.getPoliticaSchedulazione() == 5) {
            for (int row=0; row<configurazioneAmbiente.getNumProcessi(); row++) {
                listaProcessi.add( new ProcessoConPriorita(
                        (String) processi.getCombinazioneProcessi()[row][0],
                        ((Integer)processi.getCombinazioneProcessi()[row][1]).intValue(),
                        ((Integer)processi.getCombinazioneProcessi()[row][2]).intValue(),
                        ((Integer)processi.getCombinazioneProcessi()[row][3]).intValue()
                        ));
                
            }
        } else {
            for (int row=0; row<configurazioneAmbiente.getNumProcessi(); row++) {
                listaProcessi.add( new Processo(
                        (String) processi.getCombinazioneProcessi()[row][0],
                        ((Integer)processi.getCombinazioneProcessi()[row][1]).intValue(),
                        ((Integer)processi.getCombinazioneProcessi()[row][2]).intValue()
                        ));
            }
        }
        
        creaAccessi();
        
        try {
            inizializzaConfigurazioneIniziale();
        }catch (Exception e) {
            e.printStackTrace();
        }
        
        this.setVisible(false);
        view.abilitaTutto();
        view.setIstanteZero();
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonAnnullaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnullaActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonAnnullaActionPerformed

    private void jButtonNuovoFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuovoFrameActionPerformed
        
        if (politica.getGestioneMemoria() == 1){
            
            listaFrame.add(new Pagina(new Integer(contatoreFrame).toString(),
                    configurazioneAmbiente.getDimensionePagina(),0));
            
            listaFrameModel.addElement("Pagina "+contatoreFrame);
            
        }
        else {
            //DA FARE CON I SEGMENTIII
            //listaFrame.add(new Segmento());
        
        }
        
        contatoreFrame++;
    }//GEN-LAST:event_jButtonNuovoFrameActionPerformed

    private void jTabbedPaneProcessiStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneProcessiStateChanged
        aggiornaListaFrame();
    }//GEN-LAST:event_jTabbedPaneProcessiStateChanged
    
    private void inizializzaConfigurazioneIniziale() throws Exception {
        confIniziale = new ConfigurazioneIniziale(configurazioneAmbiente.getBandaBusDati(),
                                                  politica.getPolitica(),
                                                  politica.getGestioneMemoria(),                                                  
                                                  politica.getPoliticaSchedulazione(),
                                                  configurazioneAmbiente.getDimensioneRAM(),
                                                  configurazioneAmbiente.getDimensioneAreaSWAP(),
                                                  configurazioneAmbiente.getTempoContextSwitch(),
                                                  configurazioneAmbiente.getTempoAccessoDisco(),
                                                  configurazioneAmbiente.getDimensionePagina(),
                                                  listaProcessi,
                                                  politica.getTimeSlice());
        

        view.setConfigurazioneIniziale(confIniziale);
        
        for(int i=0;i<listaProcessi.size();i++){
            for(int j=0;j<listaProcessi.get(i).getAccessi().size();j++){
                Processo.Accesso temp = (Processo.Accesso) listaProcessi.get(i).getAccessi().get(j);
                System.out.print(listaProcessi.get(i).getNome()+" - "+ temp.getRisorsa().getIndirizzo() +" - "+temp.getIstanteRichiesta());
            }
                
        }
        
    }
    
    /**
     * Metodo che crea un JScrollPane contenente tutte le liste rappresentanti 
     * gli istanti di esecuzione del processo passato per parametro.
     * Ogni lista e' contenuta in un JScrollPane indipendente in modo da poter 
     * effettuare lo scrolling se ci sono troppi FrameMemoria.
     * 
     * @param IdProcesso
     *      Intero che rappresenta l'Id del processo di cui creare il pannello.
     * @return Ritorna un JScrollPane contenente tutte le liste degli istanti del
     *         processo passato.
     */
    private JScrollPane creaPannelloProcesso(int IdProcesso){
        JPanel nuovoPannello = new JPanel();
                
        int numIstanti = ((Integer)processi.getCombinazioneProcessi()[IdProcesso][2]).intValue();
        
        for(int i=0; i< numIstanti; i++){
            /*creo un modello di default per la lista*/
            listModels.add(new DefaultListModel());
            
            /* e lo associo alla lista da costruire */
            JList list1=new JList(listModels.get(listModels.size()-1));
            
            list1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            list1.setTransferHandler(arrayListHandler);
            list1.setDragEnabled(true);
            list1.setName(Integer.toString(listaList.size()));
            listaList.add(list1); 
            
            /* Per ogni lista creo un mouseListner */
            list1.addMouseListener(new MouseAdapter() {
                 public void mouseClicked(MouseEvent e) {                     
                     if (e.getButton() == MouseEvent.BUTTON1) {
                         JList lista =((JList)e.getComponent());
                         int index = lista.getSelectedIndex();
                         if(index != -1){
                            int idLista = Integer.parseInt(lista.getName());
                            listModels.get(idLista).remove(index);
                         }
                         
                      }
                 }
             });   
            
            JScrollPane list1View = new JScrollPane(list1);
            list1View.setPreferredSize(new Dimension(100, 220));
            nuovoPannello.add(list1View);
        }
        
        JScrollPane nuovoScrollPane = new JScrollPane(nuovoPannello);
        nuovoScrollPane.setPreferredSize(new Dimension(420, 270));
        
        return nuovoScrollPane;
    }
    
    /**
     * Metodo che aggiorna il modello per la lista dei FrameMemoria di un processo.
     * E' necessario perchè ogni processo ha i propri FrameMemoria.
     */
    private void aggiornaListaFrame(){        
        
        int indiceProcesso = jTabbedPaneProcessi.getSelectedIndex();  
        
        listaFrameModel = modelliListaFrame.get(indiceProcesso);
        
        jListFrame.setModel(listaFrameModel);
        
    }
    
    /**
     * Metodo che crea ed associa gli Accessi ai vari FrameMemoria ai processi
     */
    private void creaAccessi() {
        
        int indiceModello = 0;
        
        for(int indiceProcesso = 0; indiceProcesso<listaProcessi.size(); indiceProcesso++){
            
            Processo processoAttuale = listaProcessi.get(indiceProcesso);
          
            for(int istante = 0; istante < processoAttuale.getTempoEsecuzione(); istante++){
                
                /* Per ogni FrameMemoria dell'istante crea l'Accesso */
                for (int frame = 0; frame < listModels.get(indiceModello).size(); frame++){
                    
                    FrameMemoria frameAttuale = estraiFrame((String)listModels.
                                                get(indiceModello).get(frame));
                    if(frameAttuale != null){
                        
                        frameAttuale.setIdProcesso(processoAttuale.getId());
                        
                        processoAttuale.richiestaFrameMemoria(frameAttuale, istante);
                        
                    }
                    
                }
                
                indiceModello++;
                
            }
            
        }
        
    }
    
    /**
     * Metodo che restituisce iil FrameMemoria rappresentato da una stringa passata
     * per parametro, all'interno di una JList.
     * 
     * @param nome
     *        La stringa visualizzata nella JList e che rappresenta il FrameMemoria.
     * @return Il FrameMemoria desiderato, che può essere null se non esistente.
     */
    private FrameMemoria estraiFrame(String nome){
        
        if(politica.getGestioneMemoria() == 1){
            /* Paginazione */
            for(int indiceFrame = 0; indiceFrame < listaFrame.size(); indiceFrame++){
                
                if(nome.equals("Pagina "+listaFrame.get(indiceFrame).getIndirizzo())){
                    
                    return listaFrame.get(indiceFrame);
                    
                }
                        
            }
            
        }
        else{
            /* Segmentazione */
            for(int indiceFrame = 0; indiceFrame < listaFrame.size(); indiceFrame++){
                
                if(nome.equals("Segmento "+listaFrame.get(indiceFrame).getIndirizzo())){
                    
                    return listaFrame.get(indiceFrame);
                    
                }
                        
            }
            
        }
        
        return null;
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnulla;
    private javax.swing.JButton jButtonIndietro;
    private javax.swing.JButton jButtonNuovoFrame;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JLabel jLabelAssociazioneProcessi;
    private javax.swing.JLabel jLabelPasso;
    private javax.swing.JList jListFrame;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelFrame;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPaneProcessi;
    // End of variables declaration//GEN-END:variables
    
}
